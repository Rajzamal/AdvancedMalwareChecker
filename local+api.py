from tkinter import *
import tkinter.messagebox
from tkinter import filedialog
from threading import *
import json
import hashlib
from virus_total_apis import PublicApi as VirusTotalPublicApi
from checksumdir import dirhash
import os
import checksum
import sys
import pandas as pd
df = pd.read_csv('new.csv')



directory  = 'C:/Users/Knownoutlander/Downloads/'
#API_KEY = 'd0ea376cfca314a97b31c3d755549d6e674d35c2650ccd7c355fcedb1a23738c'
#vt = VirusTotalPublicApi(API_KEY)

global API_KEY_FLAG
global meow
global newList
newHash='1'
root = Tk() #blank window or Constructer
root.geometry("400x500")

# Add image file
bg = PhotoImage(file = "shield2.png")

# Create Canvas
canvas1 = Canvas( root, width = 400,height = 400)

canvas1.pack(fill = "both", expand = True)

# Display image
canvas1.create_image( 0, 0, image = bg,anchor = "nw")

#print(md5hash)
def hashing2(arr,newHash):
    for x in arr:
    
        beforeHashed = directory+x
        #print(beforeHashed)
        hashed = checksum.get_for_file(beforeHashed,hash_mode='md5')
       
        c=df[df.Hashes == hashed]
        
        bol = c.empty
        print(bol)
        if bol is False:
            print(x+ " is a Malicious file & will be Deleted")
            answer = tkinter.messagebox.askquestion('Warning',x+ " is a Malicious file. Do you want to delete it?")
            if answer == 'yes':
                os.remove(beforeHashed)
                print("The File will be Deleted")
        else:
            print(x+" is Not a Malicious file")

    meow = dirhash(directory, 'md5')
    newHash = meow
    return meow  
        

def mainLike(newHash):
    #global newHash
    while True:
        md5hash = dirhash(directory, 'md5')
        #print(newHash+" "+md5hash)
        if(md5hash != newHash):
            arr = os.listdir(directory)
            newList = []
            #hashing2(arr)
            for x in arr:
                if("." in x):
                   #print(x)
                    newList.append(x)
            #print(newList)
            answer2 = tkinter.messagebox.askquestion("Alert","Do you want local Checking?")
            if answer2 == 'yes':
                meow = hashing2(newList,newHash)
            else:
            
                meow = hashing(newList,newHash)
            
            newHash = meow
            #print(newHash +" this is it")
            
def hashing(arr,newHash):
    global API_KEY
    API_KEY_FLAG = 0
    for x in arr:
        beforeHashed = directory+x
        #print(beforeHashed)
        hashed = checksum.get_for_file(beforeHashed,hash_mode='md5')
        print(str(hashed))
        API_KEY_FLAG = API_KEY_FLAG + 1
        if(API_KEY_FLAG > 4):
            API_KEY = '5a1439bcf4ded0f93be8d9450322ab3131befd11074e1a7bd1ac5d5e7a6b764d'
            vt = VirusTotalPublicApi(API_KEY)
            #rint(API_KEY_FLAG)
            #rint(API_KEY)
            virusTotal(hashed,x,vt,beforeHashed)
        else:
            API_KEY = 'd0ea376cfca314a97b31c3d755549d6e674d35c2650ccd7c355fcedb1a23738c'
            vt = VirusTotalPublicApi(API_KEY)
            #rint(API_KEY)
            virusTotal(hashed,x,vt,beforeHashed)
    meow = dirhash(directory, 'md5')
    newHash = meow
    return meow
        
def virusTotal(EICAR_MD5,x,vt,beforeHashed):
    #print(API_KEY)
    response = vt.get_file_report(EICAR_MD5)
    output = json.dumps(response, sort_keys=False, indent=4)
    meow = len(output)
    #print(output)
    result1 = output.find('positives": 0')
    #print(result1)
    result2 = output.find('The requested resource is not among the finished, queued or pending scans')
    #print(result2)
    if (result1 >= 0 or result2 >= 0):
        print(x+" is Not a Malicious file")
    else:
        print(x+ " is a Malicious file & will be Deleted")
        answer = tkinter.messagebox.askquestion('Warning',x+ " is a Malicious file. Do you want to delete it?")
        if answer == 'yes':
            os.remove(beforeHashed)
            print("The File will be Deleted")
          

def printMessage():
    mainLike(newHash)
    
    
    
def threading():
        # Call work function
    t1=Thread(target=printMessage)
    t1.start()
        
        
def quit():
    root.destroy()
    
    
def folder():
    global directory
    folder_selected = filedialog.askdirectory()
    directory = folder_selected
    #print(directory)
        
        
#def pnt():
    #print(directory)



class rajsButtons:
    
    def __init__(self,master):
        frame = Frame(master)
        frame.pack()
        self.printButton = Button(frame,text='Start',command=threading)
        self.printButton.pack(side=LEFT)
        self.quitButton = Button(frame,text='Quit',command=quit)
        self.quitButton.pack(side=LEFT)
        
        self.folderButton = Button(frame,text='Select Folder',command=folder)
        self.folderButton.pack(side=LEFT)
        
        #self.pntButton = Button(frame,text='Pnt',command=pnt)
        #self.pntButton.pack(side=LEFT)
        

    


             
b = rajsButtons(root)

root.mainloop() # A loop to continus to display 
